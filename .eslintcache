[{"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\index.js":"1","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\components\\Project\\Project.js":"2","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\components\\Login\\Login.js":"3","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\reportWebVitals.js":"4","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\App.js":"5","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\index.js":"6","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\components\\Emloyee\\Employee.js":"7","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\login\\Reducer.js":"8","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\employees\\Reducer.js":"9","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\project\\Reducer.js":"10","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\login\\types.js":"11","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\employees\\Types.js":"12","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\project\\Types.js":"13","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\login\\Actions.js":"14","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\employees\\Action.js":"15","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\project\\Action.js":"16","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\untils\\api.js":"17"},{"size":1103,"mtime":1608366823921,"results":"18","hashOfConfig":"19"},{"size":3368,"mtime":1608448972654,"results":"20","hashOfConfig":"19"},{"size":5708,"mtime":1608476536930,"results":"21","hashOfConfig":"19"},{"size":375,"mtime":1608352590530,"results":"22","hashOfConfig":"19"},{"size":699,"mtime":1608187193885,"results":"23","hashOfConfig":"19"},{"size":338,"mtime":1608380770795,"results":"24","hashOfConfig":"19"},{"size":20457,"mtime":1608559137715,"results":"25","hashOfConfig":"19"},{"size":344,"mtime":1608438890961,"results":"26","hashOfConfig":"19"},{"size":850,"mtime":1608544494444,"results":"27","hashOfConfig":"19"},{"size":385,"mtime":1608379038861,"results":"28","hashOfConfig":"19"},{"size":66,"mtime":1608362112141,"results":"29","hashOfConfig":"19"},{"size":220,"mtime":1608544253887,"results":"30","hashOfConfig":"19"},{"size":135,"mtime":1608381238989,"results":"31","hashOfConfig":"19"},{"size":547,"mtime":1608396295205,"results":"32","hashOfConfig":"19"},{"size":673,"mtime":1608544253887,"results":"33","hashOfConfig":"19"},{"size":249,"mtime":1608379037546,"results":"34","hashOfConfig":"19"},{"size":361,"mtime":1608381685401,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"t602ay",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\index.js",[],["74","75","76","77","78","79"],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\components\\Project\\Project.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\components\\Login\\Login.js",["80","81"],"/* eslint-disable no-unused-vars */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable import/order */\nimport React, { useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport ProTypes from 'prop-types';\nimport testAPI from '../../untils/api';\nimport './index.css';\n// eslint-disable-next-line import/no-unresolved\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\n// eslint-disable-next-line import/no-unresolved\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport { getEmployeesList } from '../../store/employees/Action';\nimport { actionLogin } from '../../store/login/Actions';\n\nconst qs = require('querystring');\n// import { Form } from 'react-bootstrap';\n\n/* eslint-disable react/react-in-jsx-scope */\nconst initialState = {\n  email: '',\n  password: '',\n};\nconst Login = (propsLogin) => {\n  const history = useHistory();\n  const [userLogin, setUserLogin] = useState(initialState);\n  // eslint-disable-next-line no-unused-vars\n  const [notiState, setNotiState] = useState('');\n  const [modalState, setModalState] = useState(false);\n  // eslint-disable-next-line no-unused-vars\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={async (values, { setSubmitting }) => {\n        setSubmitting(false);\n        testAPI.post('/login/', qs.stringify(values)).then((data) => {\n          console.log('data', data);\n          if (data.data.message === 'Cannot find user in db') {\n            setNotiState('Dang nhap that bai.');\n            setModalState(true);\n          } else if (data.data === 'Password wrong.') {\n            setNotiState('Sai mật khẩu.');\n            setModalState(true);\n          } else {\n            propsLogin.actionLogin(data.data);\n            history.push('/employee');\n          }\n        }).catch((err) => {\n          console.log('err', err);\n        });\n      }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Email must required.';\n        } else if (!EmailValidator.validate(values.email)) {\n          errors.email = 'Invalid email.';\n        }\n        if (!values.password) {\n          errors.password = 'Required';\n        } else if (values.password.length < 8) {\n          errors.password = 'Password must be 8 characters long.';\n        }\n        return errors;\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email().required('Required'),\n        password: Yup.string()\n          .required('No password provided.')\n          .min(8, 'Password is too short - should be 8 chars minimum.'),\n      })}\n    >\n      {(prop) => {\n        const {\n          values,\n          touched,\n          errors,\n          // isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = prop;\n        return (\n          <>\n            <div className=\"test-login\">\n              <div className=\"signup\">\n                <h1 className=\"signup-heading\">Sign up</h1>\n                <Form className=\"signup-form\" noValidate onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"usernameInput\">\n                    <Form.Label className=\"signup-label\">\n                      Email\n                    </Form.Label>\n                    <Form.Control onBlur={handleBlur} value={values.email} className={errors.email && touched.email && 'error'} type=\"text\" placeholder=\"Enter the user name\" name=\"email\" onChange={handleChange} />\n                    {errors.email && touched.email && (\n                    <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n\n                  </Form.Group>\n                  <Form.Group controlId=\"passwordInput\">\n                    <Form.Label className=\"signup-label\">Password</Form.Label>\n                    <Form.Control type=\"password\" onBlur={handleBlur} value={values.password} placeholder=\"Enter your password\" className={errors.password && touched.password && 'error'} name=\"password\" onChange={handleChange} />\n                    {errors.password && touched.password && (\n                    <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                  </Form.Group>\n                  <Button className=\"signup-submit\" type=\"submit\">Đăng nhập</Button>\n                </Form>\n              </div>\n\n            </div>\n            <Modal\n              show={modalState}\n              onHide={() => {\n                setModalState(false);\n              }}\n              size=\"sm\"\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Thông báo từ Admin</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>{notiState}</Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setModalState(false);\n                  }}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n      }}\n    </Formik>\n  );\n};\n\nLogin.propTypes = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  getEmployeesList: ProTypes.func.isRequired,\n  // eslint-disable-next-line react/no-unused-prop-types\n  actionLogin: ProTypes.func.isRequired,\n};\nconst mapStatetoProps = (state) => ({\n  employees: state.employees,\n  // loginReducer: state.loginReducer,\n});\nexport default connect(mapStatetoProps, {\n  getEmployeesList,\n  actionLogin,\n})(Login);\n","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\reportWebVitals.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\App.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\index.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\components\\Emloyee\\Employee.js",["82","83","84","85"],"/* eslint-disable camelcase */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-vars */\n/* eslint-disable linebreak-style */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable linebreak-style */\n\n// eslint-disable-next-line no-unused-vars\nimport React, { useEffect, useState } from 'react';\nimport {\n  Button, Col, Container, Form, FormControl, InputGroup, Modal, Row, Table,\n} from 'react-bootstrap';\n// eslint-disable-next-line import/no-unresolved\nimport { Link } from 'react-router-dom';\nimport ProTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport testAPI from '../../untils/api';\nimport {\n  getEmployeesList, updateEmployeeList, addUsertoList, deleteUser,\n} from '../../store/employees/Action';\nimport './index.css';\n\nconst qs = require('querystring');\n\nconst Employee = (propsEmployee) => {\n  const Employees = propsEmployee.employees.employees;\n  // console.log(propsEmployee.userLogin);\n  const [updateState, setUpdateState] = useState({});\n  const [searchState, setSearchState] = useState([]);\n  const [modalEdit, setModalEdit] = useState(false);\n  const [modalState, setModalState] = useState(false);\n  const [notiState, setNotiState] = useState('');\n  const [createModal, setCreateModal] = useState('');\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const xoa_dau = (str) => {\n    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, 'a');\n    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, 'e');\n    str = str.replace(/ì|í|ị|ỉ|ĩ/g, 'i');\n    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, 'o');\n    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u');\n    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y');\n    str = str.replace(/đ/g, 'd');\n    str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, 'A');\n    str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, 'E');\n    str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, 'I');\n    str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, 'O');\n    str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, 'U');\n    str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, 'Y');\n    str = str.replace(/Đ/g, 'D');\n    return str;\n  };\n  const handleChangeSearch = (event) => {\n    setSearchTerm(event.target.value);\n  };\n  useEffect(() => {\n    if (propsEmployee.userLogin.role === 'AD') {\n      testAPI.get('/employees/').then((data) => {\n        // eslint-disable-next-line no-unused-expressions\n        propsEmployee.getEmployeesList(data.data);\n        setSearchState(data.data);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const results = Employees.filter((user) => xoa_dau(user.name)\n      .toLowerCase().includes(xoa_dau(searchTerm).toLowerCase()));\n    console.log('result', results);\n    setSearchState(results);\n  }, [searchTerm]);\n  return (\n    <Formik\n      initialValues={{ email: '', password: '', name: '' }}\n      onSubmit={async (values, { setSubmitting }) => {\n        setSubmitting(false);\n        testAPI.post(`/employees/${values.id}`, qs.stringify(values)).then((data) => {\n          console.log('data', data);\n          if (data.data.message === 'Email da ton tai.') {\n            setNotiState('Dang nhap that bai.');\n            setModalState(true);\n          } else {\n            setModalEdit(false);\n            setNotiState('Thanh cong');\n            console.log('data', data.data);\n            propsEmployee.updateEmployeeList(data.data);\n          }\n        }).catch((err) => {\n          setModalEdit(false);\n          setNotiState('Loi gi do.');\n        });\n      }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Email must required.';\n        } else if (!EmailValidator.validate(values.email)) {\n          errors.email = 'Invalid email.';\n        }\n        if (!values.name) {\n          errors.name = 'Name must required';\n        }\n        if (!values.password) {\n          errors.password = 'Required';\n        } else if (values.password.length < 8) {\n          errors.password = 'Password must be 8 characters long.';\n        }\n        return errors;\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email().required('Required'),\n        password: Yup.string()\n          .required('No password provided.')\n          .min(8, 'Password is too short - should be 8 chars minimum.'),\n      })}\n    >\n      {(prop) => {\n        const {\n          values,\n          touched,\n          errors,\n          // isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = prop;\n        const createClick = (e) => {\n          e.preventDefault();\n          testAPI.post('/employees/register', qs.stringify(values)).then((data) => {\n            if (data.message === 'User already exist.') {\n              setNotiState('User already exist.');\n              setCreateModal(false);\n              setNotiState(true);\n            } else {\n              setNotiState('Successfull.');\n              propsEmployee.addUsertoList(data.data);\n              setCreateModal(false);\n              setNotiState(true);\n            }\n          }).then((err) => setNotiState(err));\n        };\n        const conFirmDelte = () => {\n          // e.preventDefault();\n          testAPI.post(`employees/deleteUser/${values.id}`).then((data) => {\n            console.log('data', data);\n            if (data.data.message === 'successfull') {\n              propsEmployee.deleteUser(values.id);\n              setDeleteModal(false);\n            }\n          });\n        };\n        const closeCreateModal = () => {\n          setCreateModal(false);\n          values.email = '';\n          values.password = '';\n          values.name = '';\n        };\n        const closeDeleteModal = () => {\n          setDeleteModal(false);\n        };\n        return (\n          <>\n            <div className=\"EmployeePage\">\n              <div className=\"topProject\">\n                <div className=\"projectTitle\">\n                  <h1 className=\"hiSoftText\">\n                    Hisoft EMS\n                  </h1>\n                </div>\n              </div>\n              <div className=\"bodyDashboard\">\n                <Container fluid>\n                  <Row>\n                    <Col xs={2} className=\"FirstColumnInDashBoard\">\n                      <div className=\"test\">\n                        <div>\n                          <Link to=\"/employee\">Dashboard</Link>\n                        </div>\n                        {\n                          propsEmployee.userLogin.role === 'AD'\n                            ? (\n                              <div>\n                                <Link to=\"/employee\" className=\"link-Employees\">Nhân sự</Link>\n                              </div>\n                            ) : (<p />)\n                        }\n\n                        <div>\n                          <Link to=\"/project\">Dự án</Link>\n                        </div>\n                        <div>\n                          <p>Báo cáo</p>\n                        </div>\n                      </div>\n                    </Col>\n                    <Col xs={10} className=\"mainterDashBoard\">\n                      <h2>Danh sách nhân sự</h2>\n                      {\n                        propsEmployee.userLogin.role === 'AD'\n                          ? (\n                            <Row>\n                              <Col md={4}>\n                                <Button\n                                  className=\"buttonDashBoard\"\n                                  onClick={() => {\n                                    setCreateModal(true);\n                                    values.email = '';\n                                    values.password = '';\n                                    values.name = '';\n                                  }}\n                                >\n                                  Thêm mới\n                                </Button>\n                              </Col>\n                              <Col md={{ span: 4, offset: 4 }} className=\" m-auto\">\n                                <InputGroup className=\"mb-3\">\n                                  <FormControl\n                                    placeholder=\"Tìm kiếm\"\n                                    aria-label=\"Recipient's username\"\n                                    aria-describedby=\"basic-addon2\"\n                                    className=\"input-search flex-grow-9\"\n                                    onChange={handleChangeSearch}\n                                    value={searchTerm}\n                                  />\n                                  <Button className=\"button-search\">\n                                    <i className=\"fas fa-search\" />\n                                  </Button>\n                                </InputGroup>\n                              </Col>\n                            </Row>\n                          ) : (<p />)\n                      }\n                      <Table>\n                        {/* <Button\n                                  className=\"buttonDashBoard\"\n                                  onClick={() => {\n                                    setCreateModal(true);\n                                    values.email = '';\n                                    values.password = '';\n                                    values.name = '';\n                                  }}\n                                >\n                                  Thêm mới\n                                </Button> */}\n                        <thead>\n                          <tr className=\"row-header\">\n                            <th>Tên</th>\n                            <th>Email</th>\n                            <th>Số điện thoại</th>\n                            <th>Ngày sinh</th>\n                            <th>Hành động</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            searchState.length > 0 ? (\n                              searchState.map((data, index) => (\n                                <tr id={index} className=\"row-header\">\n                                  <td>{data.name}</td>\n                                  <td>{data.email}</td>\n                                  <td>123</td>\n                                  <td>123</td>\n                                  <td>\n                                    <Button\n                                      className=\"_button-edit\"\n                                      onClick={() => {\n                                        Object.assign(values, Employees[index]);\n                                        setModalEdit(true);\n                                      }}\n                                    >\n                                      Sửa\n                                    </Button>\n                                    <Button\n                                      className=\"_button-delete btn-danger\"\n                                      onClick={() => {\n                                        Object.assign(values, Employees[index]);\n                                        setDeleteModal(true);\n                                      }}\n                                    >\n                                      Xóa\n                                    </Button>\n                                  </td>\n                                </tr>\n                              ))\n                            ) : (\n                              <tr id={0}>\n                                <td>Have some trouble</td>\n                              </tr>\n                            )\n                          }\n                        </tbody>\n                      </Table>\n                    </Col>\n                  </Row>\n                </Container>\n              </div>\n            </div>\n            {/* Modal Edit user */}\n            <Modal\n              show={modalEdit}\n              onHide={() => {\n                setModalEdit(false);\n                values.email = '';\n                values.password = '';\n                values.name = '';\n              }}\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Edit</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Form noValidate onSubmit={handleSubmit}>\n                  {/* Name */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"password\">New Name</Form.Label>\n                    <Form.Control\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Enter name\"\n                      value={values.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.name && touched.name && 'error'\n                      }\n                    />\n                    {errors.name && touched.name && (\n                      <div className=\"input-feedback\">{errors.name}</div>\n                    )}\n                  </Form.Group>\n                  {/* Password */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"password\">Password </Form.Label>\n                    <Form.Control\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"text\"\n                      placeholder=\"Enter password\"\n                      value={values.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.password && touched.password && 'error'\n                      }\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                  </Form.Group>\n                  {/* email */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"email\">New Email</Form.Label>\n                    <Form.Control\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"text\"\n                      placeholder=\"Enter email\"\n                      value={values.email}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.email && touched.email && 'error'\n                      }\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n                  </Form.Group>\n                </Form>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={handleSubmit}\n                >\n                  Sửa\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setModalEdit(false);\n                  }}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            {/* Modal create user */}\n            <Modal\n              show={createModal}\n              onHide={closeCreateModal}\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Create</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Form noValidate>\n                  {/* Name */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"password\">Name</Form.Label>\n                    <Form.Control\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Enter name\"\n                      value={values.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.name && touched.name && 'error'\n                      }\n                    />\n                    {errors.name && touched.name && (\n                      <div className=\"input-feedback\">{errors.name}</div>\n                    )}\n                  </Form.Group>\n                  {/* Password */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"password\">Password </Form.Label>\n                    <Form.Control\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"text\"\n                      placeholder=\"Enter password\"\n                      value={values.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.password && touched.password && 'error'\n                      }\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                  </Form.Group>\n                  {/* email */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"email\">Email</Form.Label>\n                    <Form.Control\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"text\"\n                      placeholder=\"Enter email\"\n                      value={values.email}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.email && touched.email && 'error'\n                      }\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n                  </Form.Group>\n                </Form>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={createClick}\n                >\n                  Thêm\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={closeCreateModal}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            {/* Modal delete user */}\n            <Modal\n              show={deleteModal}\n              onHide={closeDeleteModal}\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n\n              <Modal.Header closeButton>\n                <Modal.Title>Delte</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Modal.Title>\n                  Chắc chắn delete user.\n                </Modal.Title>\n              </Modal.Body>\n\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={\n                    conFirmDelte\n\n                  }\n                >\n                  Delete\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={closeDeleteModal}\n\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n      }}\n    </Formik>\n  );\n};\nEmployee.ProTypes = {\n  employees: ProTypes.array.isRequired,\n  getEmployeesList: ProTypes.func.isRequired,\n  userLogin: ProTypes.object.isRequired,\n  addUsertoList: ProTypes.func.isRequired,\n  deleteUser: ProTypes.func.isRequired,\n};\nconst mapStatetoProps = (state) => ({\n  employees: state.employees,\n  userLogin: state.loginReducer.userInfo,\n});\nexport default connect(mapStatetoProps, {\n  getEmployeesList,\n  updateEmployeeList,\n  addUsertoList,\n  deleteUser,\n})(Employee);\n","D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\login\\Reducer.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\employees\\Reducer.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\project\\Reducer.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\login\\types.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\employees\\Types.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\project\\Types.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\login\\Actions.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\employees\\Action.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\store\\project\\Action.js",[],"D:\\codeTNA\\internFull\\eps-Noibo-web\\Frontend\\src\\untils\\api.js",[],["86","87","88","89","90","91"],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":40,"column":11,"nodeType":"106","messageId":"107","endLine":40,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":52,"column":11,"nodeType":"106","messageId":"107","endLine":52,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":71,"column":5,"nodeType":"106","messageId":"107","endLine":71,"endColumn":16},{"ruleId":"104","severity":1,"message":"105","line":80,"column":11,"nodeType":"106","messageId":"107","endLine":80,"endColumn":22},{"ruleId":"104","severity":1,"message":"105","line":87,"column":13,"nodeType":"106","messageId":"107","endLine":87,"endColumn":24},{"ruleId":"104","severity":1,"message":"105","line":147,"column":13,"nodeType":"106","messageId":"107","endLine":147,"endColumn":24},{"ruleId":"92","replacedBy":"108"},{"ruleId":"94","replacedBy":"109"},{"ruleId":"96","replacedBy":"110"},{"ruleId":"98","replacedBy":"111"},{"ruleId":"100","replacedBy":"112"},{"ruleId":"102","replacedBy":"113"},"lines-around-directive",["114"],"no-spaced-func",["115"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected",["114"],["115"],[],[],[],[],"padding-line-between-statements","func-call-spacing"]