[{"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\index.js":"1","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\App.js":"2","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\reportWebVitals.js":"3","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\index.js":"4","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\Login\\Login.js":"5","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\Project\\Project.js":"6","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\Emloyee\\Employee.js":"7","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\reducer.js":"8","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\project\\Reducer.js":"9","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\employees\\Reducer.js":"10","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\employees\\Action.js":"11","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\actions.js":"12","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\project\\Action.js":"13","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\project\\Types.js":"14","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\types.js":"15","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\employees\\Types.js":"16","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\untils\\api.js":"17","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\DashBoard\\Dashboard.js":"18","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\Actions.js":"19","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\Types.js":"20","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\Reducer.js":"21"},{"size":1136,"mtime":1608707059843,"results":"22","hashOfConfig":"23"},{"size":799,"mtime":1608824079085,"results":"24","hashOfConfig":"23"},{"size":375,"mtime":1608708494802,"results":"25","hashOfConfig":"23"},{"size":338,"mtime":1608911827032,"results":"26","hashOfConfig":"23"},{"size":6140,"mtime":1608912567912,"results":"27","hashOfConfig":"23"},{"size":20695,"mtime":1609090961611,"results":"28","hashOfConfig":"23"},{"size":24459,"mtime":1609000040697,"results":"29","hashOfConfig":"23"},{"size":454,"mtime":1608909514147,"results":"30","hashOfConfig":"23"},{"size":855,"mtime":1609091439600,"results":"31","hashOfConfig":"23"},{"size":850,"mtime":1608911835394,"results":"32","hashOfConfig":"23"},{"size":673,"mtime":1608911840704,"results":"33","hashOfConfig":"23"},{"size":650,"mtime":1608909513252,"results":"34","hashOfConfig":"23"},{"size":607,"mtime":1609084523871,"results":"35","hashOfConfig":"23"},{"size":246,"mtime":1608855785141,"results":"36","hashOfConfig":"23"},{"size":66,"mtime":1608909499815,"results":"37","hashOfConfig":"23"},{"size":220,"mtime":1608911801868,"results":"38","hashOfConfig":"23"},{"size":361,"mtime":1608708466740,"results":"39","hashOfConfig":"23"},{"size":7438,"mtime":1608911854410,"results":"40","hashOfConfig":"23"},{"size":650,"mtime":1608909513252,"results":"41","hashOfConfig":"23"},{"size":66,"mtime":1608909499815,"results":"42","hashOfConfig":"23"},{"size":454,"mtime":1608909514147,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"jiyvge",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\index.js",[],["89","90","91","92","93","94"],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\App.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\reportWebVitals.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\index.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\Login\\Login.js",["95"],"/* eslint-disable no-unused-vars */\n/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable import/order */\nimport React, { useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport ProTypes from 'prop-types';\nimport testAPI from '../../untils/api';\nimport './index.css';\n// eslint-disable-next-line import/no-unresolved\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\n// eslint-disable-next-line import/no-unresolved\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport { actionLogin } from '../../store/login/Actions';\n\nconst qs = require('querystring');\n// import { Form } from 'react-bootstrap';\n\n/* eslint-disable react/react-in-jsx-scope */\n\nconst Login = (propsLogin) => {\n  const history = useHistory();\n  // eslint-disable-next-line no-unused-vars\n  const [notiState, setNotiState] = useState('');\n  const [modalState, setModalState] = useState(false);\n  const dataLocal = {\n    email: localStorage.getItem('email'),\n    password: localStorage.getItem('password'),\n  };\n  if (localStorage.getItem('email') !== ''\n    && localStorage.getItem('password') !== '') {\n    testAPI.post('/login/', qs.stringify(dataLocal)).then((data) => {\n      if (data.data.message !== 'Cannot find user in db' || data.data !== 'Password wrong.') {\n        propsLogin.actionLogin(data.data);\n        history.push('/dashboard');\n      }\n    }).catch((err) => {\n      console.log('err', err);\n    });\n    // console.log('123');\n  }\n  // eslint-disable-next-line no-unused-vars\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      onSubmit={async (values, { setSubmitting }) => {\n        setSubmitting(false);\n        testAPI.post('/login/', qs.stringify(values)).then((data) => {\n          if (data.data.message === 'Cannot find user in db') {\n            setNotiState('Dang nhap that bai.');\n            setModalState(true);\n          } else if (data.data === 'Password wrong.') {\n            setNotiState('Sai mật khẩu.');\n            setModalState(true);\n          } else {\n            propsLogin.actionLogin(data.data);\n            localStorage.setItem('email', values.email);\n            localStorage.setItem('password', values.password);\n            history.push('/dashboard');\n          }\n        }).catch((err) => {\n          setNotiState(err.message);\n          setModalState(true);\n        });\n      }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Email must required.';\n        } else if (!EmailValidator.validate(values.email)) {\n          errors.email = 'Invalid email.';\n        }\n        if (!values.password) {\n          errors.password = 'Required';\n        } else if (values.password.length < 8) {\n          errors.password = 'Password must be 8 characters long.';\n        }\n        return errors;\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email().required('Required'),\n        password: Yup.string()\n          .required('No password provided.')\n          .min(8, 'Password is too short - should be 8 chars minimum.'),\n      })}\n    >\n      {(prop) => {\n        const {\n          values,\n          touched,\n          errors,\n          // isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = prop;\n        return (\n          <>\n            <div className=\"test-login\">\n              <div className=\"signup\">\n                <h1 className=\"signup-heading\">Sign up</h1>\n                <Form className=\"signup-form\" noValidate onSubmit={handleSubmit}>\n                  <Form.Group controlId=\"usernameInput\">\n                    <Form.Label className=\"signup-label\">\n                      Email\n                    </Form.Label>\n                    <Form.Control onBlur={handleBlur} value={values.email} className={errors.email && touched.email && 'error'} type=\"text\" placeholder=\"Enter the user name\" name=\"email\" onChange={handleChange} />\n                    {errors.email && touched.email && (\n                      <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n\n                  </Form.Group>\n                  <Form.Group controlId=\"passwordInput\">\n                    <Form.Label className=\"signup-label\">Password</Form.Label>\n                    <Form.Control type=\"password\" onBlur={handleBlur} value={values.password} placeholder=\"Enter your password\" className={errors.password && touched.password && 'error'} name=\"password\" onChange={handleChange} />\n                    {errors.password && touched.password && (\n                      <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                  </Form.Group>\n                  <Button className=\"signup-submit\" type=\"submit\">Đăng nhập</Button>\n                </Form>\n              </div>\n\n            </div>\n            <Modal\n              show={modalState}\n              onHide={() => {\n                setModalState(false);\n              }}\n              size=\"sm\"\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Thông báo từ Admin</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>{notiState}</Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setModalState(false);\n                  }}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n      }}\n    </Formik>\n  );\n};\n\nLogin.propTypes = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  // eslint-disable-next-line react/no-unused-prop-types\n  actionLogin: ProTypes.func.isRequired,\n};\nconst mapStatetoProps = (state) => ({\n  employees: state.employees,\n  // loginReducer: state.loginReducer,\n});\nexport default connect(mapStatetoProps, {\n  actionLogin,\n})(Login);\n","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\Project\\Project.js",["96","97","98","99","100","101","102"],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\Emloyee\\Employee.js",["103"],"/* eslint-disable camelcase */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-unused-vars */\n/* eslint-disable linebreak-style */\n/* eslint-disable react/no-unescaped-entities */\n/* eslint-disable linebreak-style */\n\n// eslint-disable-next-line no-unused-vars\nimport React, { useEffect, useState } from 'react';\nimport {\n  Button, Col, Container, Form, FormControl, InputGroup, Modal, Row, Table,\n} from 'react-bootstrap';\n// eslint-disable-next-line import/no-unresolved\nimport { Link, useHistory } from 'react-router-dom';\nimport ProTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as EmailValidator from 'email-validator';\nimport * as Yup from 'yup';\nimport testAPI from '../../untils/api';\nimport { actionLogOut } from '../../store/login/Actions';\nimport {\n  getEmployeesList, updateEmployeeList, addUsertoList, deleteUser,\n} from '../../store/employees/Action';\nimport './index.css';\n\nconst qs = require('querystring');\n\nconst Employee = (propsEmployee) => {\n  const [Employees, setEmployees] = useState([]);\n  // console.log(propsEmployee.userLogin);\n  const [searchState, setSearchState] = useState([]);\n  const [modalEdit, setModalEdit] = useState(false);\n  const [modalState, setModalState] = useState(false);\n  const [notiState, setNotiState] = useState('');\n  const [createModal, setCreateModal] = useState('');\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const history = useHistory();\n  const xoa_dau = (str) => {\n    str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, 'a');\n    str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, 'e');\n    str = str.replace(/ì|í|ị|ỉ|ĩ/g, 'i');\n    str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, 'o');\n    str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u');\n    str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y');\n    str = str.replace(/đ/g, 'd');\n    str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, 'A');\n    str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, 'E');\n    str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, 'I');\n    str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, 'O');\n    str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, 'U');\n    str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, 'Y');\n    str = str.replace(/Đ/g, 'D');\n    return str;\n  };\n  const format = (str) => {\n    const s2 = str.split('-');\n    return `${s2[2]}-${s2[1]}-${s2[0]}`;\n  };\n  if (Object.keys(propsEmployee.userLogin).length === 0) {\n    history.push('/');\n  }\n  const handleChangeSearch = (event) => {\n    setSearchTerm(event.target.value);\n  };\n  useEffect(() => {\n    if (propsEmployee.userLogin.role === 'AD') {\n      testAPI.get('/employees/').then((data) => {\n        // eslint-disable-next-line no-unused-expressions\n        propsEmployee.getEmployeesList(data.data);\n        setSearchState(data.data);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    setEmployees(propsEmployee.employees.employees);\n  }, [propsEmployee.employees.employees]);\n\n  useEffect(() => {\n    const results = propsEmployee.employees.employees.filter((user) => xoa_dau(user.name)\n      .toLowerCase().includes(xoa_dau(searchTerm).toLowerCase())\n      || xoa_dau(user.email)\n        .toLowerCase().includes(xoa_dau(searchTerm).toLowerCase()));\n    setSearchState(results);\n  }, [searchTerm]);\n  useEffect(() => {\n    setSearchState(propsEmployee.employees.employees);\n  }, [propsEmployee.employees.employees]);\n  return (\n    <Formik\n      initialValues={{\n        email: '', password: '', name: '', sinhnhat: '', dienthoai: '',\n      }}\n      onSubmit={async (values, { setSubmitting }) => {\n        setSubmitting(false);\n        testAPI.post(`/employees/${values.id}`, qs.stringify(values)).then((data) => {\n          if (data.data.message === 'Email da ton tai.') {\n            setNotiState('Email da ton tai.');\n            setModalState(true);\n          } else {\n            setModalEdit(false);\n            setNotiState('Thanh cong');\n            propsEmployee.updateEmployeeList(data.data);\n          }\n        }).catch((err) => {\n          setModalState(true);\n          setNotiState('Lỗi của server.');\n        });\n      }}\n      validate={(values) => {\n        const errors = {};\n        if (!values.name) {\n          errors.name = 'Name must required';\n        }\n        if (!values.password) {\n          errors.password = 'Required';\n        } else if (values.password.length < 8) {\n          errors.password = 'Password must be 8 characters long.';\n        }\n        if (!values.email) {\n          errors.email = 'Email must required.';\n        } else if (!EmailValidator.validate(values.email)) {\n          errors.email = 'Invalid email.';\n        }\n        if (!values.dienthoai) {\n          errors.dienthoai = 'Required';\n        } else if (values.dienthoai.length < 9) {\n          errors.dienthoai = 'Phone number must be 8 characters long.';\n        }\n        return errors;\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string().email().required('Required'),\n        password: Yup.string()\n          .required('No password provided.')\n          .min(8, 'Password is too short - should be 8 chars minimum.'),\n      })}\n    >\n      {(prop) => {\n        const {\n          values,\n          touched,\n          errors,\n          // isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = prop;\n        function resetState() {\n          values.email = '';\n          values.name = '';\n          values.sinhnhat = '';\n          values.password = '';\n          values.dienthoai = '';\n        }\n        const createClick = (e) => {\n          e.preventDefault();\n          if (errors.length !== 0) {\n            console.log('123123');\n          } else {\n            testAPI.post('/employees/register', qs.stringify(values)).then((data) => {\n              if (data.data.message === 'User already exist.') {\n                setNotiState('User already exist.');\n                // setCreateModal(false);\n                setModalState(true);\n              } else {\n                setNotiState('Successfull.');\n                propsEmployee.addUsertoList(data.data);\n                setCreateModal(false);\n              }\n            }).catch((err) => {\n              setNotiState(err);\n            });\n          }\n        };\n        const conFirmDelte = () => {\n          // e.preventDefault();\n          testAPI.post(`employees/deleteUser/${values.id}`).then((data) => {\n            if (data.data.message === 'successfull') {\n              propsEmployee.deleteUser(values.id);\n              setDeleteModal(false);\n            }\n          });\n        };\n        const closeCreateModal = () => {\n          setCreateModal(false);\n        };\n        const closeDeleteModal = () => {\n          setDeleteModal(false);\n        };\n\n        return (\n          <>\n            <div className=\"EmployeePage\">\n              <div className=\"topProject\">\n                <div className=\"dashBoardTitle\">\n                  <h1 className=\"hiSoftText\">\n                    Hisoft EMS\n                  </h1>\n                  <Button\n                    onClick={() => {\n                      localStorage.clear();\n                      propsEmployee.actionLogOut();\n                    }}\n                    className=\"_logOut\"\n                  >\n                    Log Out\n                  </Button>\n                </div>\n              </div>\n              <div className=\"bodyDashboard\">\n                <Container fluid>\n                  <Row>\n                    <Col md={2} xs={12} className=\"FirstColumnInEmployee col-sm\">\n                      <ul className=\"test\">\n                        <li>\n                          <Link to=\"/dashboard\">Dashboard</Link>\n                        </li>\n                        {\n                          propsEmployee.userLogin.role === 'AD'\n                            ? (\n                              <li>\n                                <Link to=\"/employee\" className=\"link-Employees\">Nhân sự</Link>\n                              </li>\n                            ) : (<p />)\n                        }\n                        <li>\n                          <Link to=\"/project\">Dự án</Link>\n                        </li>\n                        <li>Báo cáo</li>\n                      </ul>\n                    </Col>\n                    <Col md={10} className=\"maintainEmployee\">\n                      <div className=\"main-header\">\n                        <h2>Danh sách nhân sự</h2>\n                        {\n                        propsEmployee.userLogin.role === 'AD'\n                          ? (\n                            <Row>\n                              <Col md={6}>\n                                <Button\n                                  className=\"buttonDashBoard\"\n                                  onClick={() => {\n                                    setCreateModal(true);\n                                    resetState();\n                                  }}\n                                >\n                                  Thêm mới\n                                </Button>\n                              </Col>\n                              <Col md={{ span: 6, offset: 6 }} className=\" m-auto d-flex justify-content-lg-end\">\n                                <InputGroup className=\"mb-3 search-header\">\n                                  <FormControl\n                                    placeholder=\"Tìm kiếm\"\n                                    aria-label=\"Recipient's username\"\n                                    aria-describedby=\"basic-addon2\"\n                                    className=\"input-search flex-grow-9\"\n                                    onChange={handleChangeSearch}\n                                    value={searchTerm}\n                                  />\n                                  <Button className=\"button-search\">\n                                    <i className=\"fas fa-search\" />\n                                  </Button>\n                                </InputGroup>\n                              </Col>\n                            </Row>\n                          ) : (<p />)\n                      }\n                      </div>\n                      <Table responsive>\n                        <thead>\n                          <tr className=\"row-header\" id={0}>\n                            <th>Tên</th>\n                            <th>Email</th>\n                            <th>Số điện thoại</th>\n                            <th>Ngày sinh</th>\n                            <th>Hành động</th>\n                          </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            searchState.length > 0 ? (\n                              searchState.map((data, index) => (\n                                <tr id={index} className=\"row-employees\">\n                                  <td>{data.name || ''}</td>\n                                  <td>{data.email || ''}</td>\n                                  <td>{data.dienthoai}</td>\n                                  <td>{format(data.sinhnhat)}</td>\n                                  <td>\n                                    <Button\n                                      className=\"_button-edit\"\n                                      onClick={() => {\n                                        Object.assign(values, data);\n                                        setModalEdit(true);\n                                      }}\n                                    >\n                                      Sửa\n                                    </Button>\n                                    <Button\n                                      className=\"_button-delete btn-danger\"\n                                      onClick={() => {\n                                        Object.assign(values, Employees[index]);\n                                        setDeleteModal(true);\n                                      }}\n                                    >\n                                      Xóa\n                                    </Button>\n                                  </td>\n                                </tr>\n                              ))\n                            ) : (\n                              <tr id={0}>\n                                <td>Have some trouble</td>\n                              </tr>\n                            )\n                          }\n                        </tbody>\n                      </Table>\n                    </Col>\n                  </Row>\n                </Container>\n              </div>\n            </div>\n            {/* Modal Edit user */}\n            <Modal\n              show={modalEdit}\n              onHide={() => {\n                setModalEdit(false);\n              }}\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Edit</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Form noValidate onSubmit={handleSubmit}>\n                  {/* Name */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"password\">New Name</Form.Label>\n                    <Form.Control\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Nhập tên\"\n                      value={values.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.name && touched.name && 'error'\n                      }\n                    />\n                    {errors.name && touched.name && (\n                      <div className=\"input-feedback\">{errors.name}</div>\n                    )}\n                  </Form.Group>\n                  {/* Password */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"password\">Mật khẩu </Form.Label>\n                    <Form.Control\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"text\"\n                      placeholder=\"Nhập mật khẩu\"\n                      value={values.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.password && touched.password && 'error'\n                      }\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                  </Form.Group>\n                  {/* email */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"email\">New Email</Form.Label>\n                    <Form.Control\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"text\"\n                      placeholder=\"Nhập email\"\n                      value={values.email}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.email && touched.email && 'error'\n                      }\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label htmlFor=\"email\">Ngày sinh</Form.Label>\n                    <Form.Control\n                      id=\"date\"\n                      name=\"sinhnhat\"\n                      type=\"date\"\n                      value={values.sinhnhat}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                    />\n                  </Form.Group>\n                  <Form.Group>\n                    <Form.Label htmlFor=\"dienthoai\">Điện thoại</Form.Label>\n                    <Form.Control\n                      id=\"dienthoai\"\n                      name=\"dienthoai\"\n                      type=\"text\"\n                      placeholder=\"Nhập số điện thoại\"\n                      value={values.dienthoai}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.dienthoai && touched.dienthoai && 'error'\n                      }\n                    />\n                    {errors.dienthoai && touched.dienthoai && (\n                      <div className=\"input-feedback\">{errors.dienthoai}</div>\n                    )}\n                  </Form.Group>\n                </Form>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={handleSubmit}\n                >\n                  Sửa\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setModalEdit(false);\n                  }}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            {/* Modal create user */}\n            <Modal\n              show={createModal}\n              onHide={closeCreateModal}\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Tạo</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Form noValidate>\n                  {/* Name */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"name\">Tên thành viên mới:</Form.Label>\n                    <Form.Control\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      placeholder=\"Nhập tên\"\n                      value={values.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.name && touched.name && 'error'\n                      }\n                    />\n                    {errors.name && touched.name && (\n                      <div className=\"input-feedback\">{errors.name}</div>\n                    )}\n                  </Form.Group>\n                  {/* Password */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"name\">Mật khẩu </Form.Label>\n                    <Form.Control\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"text\"\n                      placeholder=\"Nhập mật khẩu\"\n                      value={values.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.password && touched.password && 'error'\n                      }\n                    />\n                    {errors.password && touched.password && (\n                      <div className=\"input-feedback\">{errors.password}</div>\n                    )}\n                  </Form.Group>\n                  {/* email */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"email\">Email</Form.Label>\n                    <Form.Control\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"text\"\n                      placeholder=\"Nhập email\"\n                      value={values.email}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.email && touched.email && 'error'\n                      }\n                    />\n                    {errors.email && touched.email && (\n                      <div className=\"input-feedback\">{errors.email}</div>\n                    )}\n                  </Form.Group>\n                  {/* Date */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"email\">Ngày sinh</Form.Label>\n                    <Form.Control\n                      id=\"date\"\n                      name=\"sinhnhat\"\n                      type=\"date\"\n                      value={values.sinhnhat}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                    />\n                  </Form.Group>\n                  {/* Dien thoai */}\n                  <Form.Group>\n                    <Form.Label htmlFor=\"dienthoai\">Điện thoại</Form.Label>\n                    <Form.Control\n                      id=\"dienthoai\"\n                      name=\"dienthoai\"\n                      type=\"text\"\n                      placeholder=\"Nhập số điện thoại\"\n                      value={values.dienthoai}\n                      onChange={prop.handleChange}\n                      onBlur={handleBlur}\n                      className={\n                        errors.dienthoai && touched.dienthoai && 'error'\n                      }\n                    />\n                    {errors.dienthoai && touched.dienthoai && (\n                      <div className=\"input-feedback\">{errors.dienthoai}</div>\n                    )}\n                  </Form.Group>\n                </Form>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button\n                  onClick={createClick}\n                >\n                  Thêm\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={closeCreateModal}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            {/* Modal delete user */}\n            <Modal\n              show={deleteModal}\n              onHide={closeDeleteModal}\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n\n              <Modal.Header closeButton>\n                <Modal.Title>Delte</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Modal.Title>\n                  Chắc chắn delete user.\n                </Modal.Title>\n              </Modal.Body>\n\n              <Modal.Footer>\n                <Button\n                  variant=\"primary\"\n                  onClick={\n                    conFirmDelte\n\n                  }\n                >\n                  Delete\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={closeDeleteModal}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n\n            {/* notification modal */}\n            <Modal\n              show={modalState}\n              onHide={() => {\n                setModalState(false);\n              }}\n              size=\"sm\"\n              aria-labelledby=\"contained-modal-title-vcenter\"\n              centered\n            >\n              <Modal.Header closeButton>\n                <Modal.Title>Thông báo từ Admin</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>{notiState}</Modal.Body>\n              <Modal.Footer>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => {\n                    setModalState(false);\n                  }}\n                >\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n      }}\n    </Formik>\n  );\n};\nEmployee.ProTypes = {\n  employees: ProTypes.array.isRequired,\n  getEmployeesList: ProTypes.func.isRequired,\n  userLogin: ProTypes.object.isRequired,\n  addUsertoList: ProTypes.func.isRequired,\n  deleteUser: ProTypes.func.isRequired,\n  actionLogOut: ProTypes.func.isRequired,\n};\nconst mapStatetoProps = (state) => ({\n  employees: state.employees,\n  userLogin: state.loginReducer.userInfo,\n});\nexport default connect(mapStatetoProps, {\n  getEmployeesList,\n  updateEmployeeList,\n  addUsertoList,\n  deleteUser,\n  actionLogOut,\n})(Employee);\n","C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\reducer.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\project\\Reducer.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\employees\\Reducer.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\employees\\Action.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\actions.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\project\\Action.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\project\\Types.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\types.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\employees\\Types.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\untils\\api.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\components\\DashBoard\\Dashboard.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\Actions.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\Types.js",[],"C:\\Users\\11\\Desktop\\linhtinh\\test\\webnoibo-front\\src\\store\\login\\Reducer.js",[],{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"116","severity":1,"message":"117","line":40,"column":7,"nodeType":"118","messageId":"119","endLine":40,"endColumn":18},{"ruleId":"116","severity":1,"message":"117","line":147,"column":17,"nodeType":"118","messageId":"119","endLine":147,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":150,"column":17,"nodeType":"118","messageId":"119","endLine":150,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":156,"column":17,"nodeType":"118","messageId":"119","endLine":156,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":159,"column":17,"nodeType":"118","messageId":"119","endLine":159,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":170,"column":13,"nodeType":"118","messageId":"119","endLine":170,"endColumn":24},{"ruleId":"116","severity":1,"message":"117","line":291,"column":39,"nodeType":"118","messageId":"119","endLine":291,"endColumn":50},{"ruleId":"116","severity":1,"message":"117","line":309,"column":39,"nodeType":"118","messageId":"119","endLine":309,"endColumn":50},{"ruleId":"116","severity":1,"message":"117","line":160,"column":13,"nodeType":"118","messageId":"119","endLine":160,"endColumn":24},"lines-around-directive",["120"],"no-spaced-func",["121"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements","func-call-spacing"]